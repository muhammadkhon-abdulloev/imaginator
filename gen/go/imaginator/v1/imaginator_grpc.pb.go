// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/imaginator.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImaginatorClient is the client API for Imaginator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImaginatorClient interface {
	UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error)
	DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error)
	ListAllFiles(ctx context.Context, in *ListAllFilesMessage, opts ...grpc.CallOption) (*ListAllFilesMessage, error)
	// stream
	UploadImageByChunk(ctx context.Context, opts ...grpc.CallOption) (Imaginator_UploadImageByChunkClient, error)
	DownloadImageByChunk(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (Imaginator_DownloadImageByChunkClient, error)
}

type imaginatorClient struct {
	cc grpc.ClientConnInterface
}

func NewImaginatorClient(cc grpc.ClientConnInterface) ImaginatorClient {
	return &imaginatorClient{cc}
}

func (c *imaginatorClient) UploadImage(ctx context.Context, in *UploadImageRequest, opts ...grpc.CallOption) (*UploadImageResponse, error) {
	out := new(UploadImageResponse)
	err := c.cc.Invoke(ctx, "/imaginator.v1.Imaginator/UploadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginatorClient) DownloadImage(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (*DownloadImageResponse, error) {
	out := new(DownloadImageResponse)
	err := c.cc.Invoke(ctx, "/imaginator.v1.Imaginator/DownloadImage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginatorClient) ListAllFiles(ctx context.Context, in *ListAllFilesMessage, opts ...grpc.CallOption) (*ListAllFilesMessage, error) {
	out := new(ListAllFilesMessage)
	err := c.cc.Invoke(ctx, "/imaginator.v1.Imaginator/ListAllFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginatorClient) UploadImageByChunk(ctx context.Context, opts ...grpc.CallOption) (Imaginator_UploadImageByChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Imaginator_ServiceDesc.Streams[0], "/imaginator.v1.Imaginator/UploadImageByChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &imaginatorUploadImageByChunkClient{stream}
	return x, nil
}

type Imaginator_UploadImageByChunkClient interface {
	Send(*UploadImageRequest) error
	CloseAndRecv() (*UploadImageResponse, error)
	grpc.ClientStream
}

type imaginatorUploadImageByChunkClient struct {
	grpc.ClientStream
}

func (x *imaginatorUploadImageByChunkClient) Send(m *UploadImageRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imaginatorUploadImageByChunkClient) CloseAndRecv() (*UploadImageResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imaginatorClient) DownloadImageByChunk(ctx context.Context, in *DownloadImageRequest, opts ...grpc.CallOption) (Imaginator_DownloadImageByChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Imaginator_ServiceDesc.Streams[1], "/imaginator.v1.Imaginator/DownloadImageByChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &imaginatorDownloadImageByChunkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Imaginator_DownloadImageByChunkClient interface {
	Recv() (*DownloadImageResponse, error)
	grpc.ClientStream
}

type imaginatorDownloadImageByChunkClient struct {
	grpc.ClientStream
}

func (x *imaginatorDownloadImageByChunkClient) Recv() (*DownloadImageResponse, error) {
	m := new(DownloadImageResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImaginatorServer is the server API for Imaginator service.
// All implementations must embed UnimplementedImaginatorServer
// for forward compatibility
type ImaginatorServer interface {
	UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error)
	DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error)
	ListAllFiles(context.Context, *ListAllFilesMessage) (*ListAllFilesMessage, error)
	// stream
	UploadImageByChunk(Imaginator_UploadImageByChunkServer) error
	DownloadImageByChunk(*DownloadImageRequest, Imaginator_DownloadImageByChunkServer) error
	mustEmbedUnimplementedImaginatorServer()
}

// UnimplementedImaginatorServer must be embedded to have forward compatible implementations.
type UnimplementedImaginatorServer struct {
}

func (UnimplementedImaginatorServer) UploadImage(context.Context, *UploadImageRequest) (*UploadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadImage not implemented")
}
func (UnimplementedImaginatorServer) DownloadImage(context.Context, *DownloadImageRequest) (*DownloadImageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadImage not implemented")
}
func (UnimplementedImaginatorServer) ListAllFiles(context.Context, *ListAllFilesMessage) (*ListAllFilesMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllFiles not implemented")
}
func (UnimplementedImaginatorServer) UploadImageByChunk(Imaginator_UploadImageByChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadImageByChunk not implemented")
}
func (UnimplementedImaginatorServer) DownloadImageByChunk(*DownloadImageRequest, Imaginator_DownloadImageByChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadImageByChunk not implemented")
}
func (UnimplementedImaginatorServer) mustEmbedUnimplementedImaginatorServer() {}

// UnsafeImaginatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImaginatorServer will
// result in compilation errors.
type UnsafeImaginatorServer interface {
	mustEmbedUnimplementedImaginatorServer()
}

func RegisterImaginatorServer(s grpc.ServiceRegistrar, srv ImaginatorServer) {
	s.RegisterService(&Imaginator_ServiceDesc, srv)
}

func _Imaginator_UploadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginatorServer).UploadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imaginator.v1.Imaginator/UploadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginatorServer).UploadImage(ctx, req.(*UploadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imaginator_DownloadImage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadImageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginatorServer).DownloadImage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imaginator.v1.Imaginator/DownloadImage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginatorServer).DownloadImage(ctx, req.(*DownloadImageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imaginator_ListAllFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllFilesMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginatorServer).ListAllFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imaginator.v1.Imaginator/ListAllFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginatorServer).ListAllFiles(ctx, req.(*ListAllFilesMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imaginator_UploadImageByChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImaginatorServer).UploadImageByChunk(&imaginatorUploadImageByChunkServer{stream})
}

type Imaginator_UploadImageByChunkServer interface {
	SendAndClose(*UploadImageResponse) error
	Recv() (*UploadImageRequest, error)
	grpc.ServerStream
}

type imaginatorUploadImageByChunkServer struct {
	grpc.ServerStream
}

func (x *imaginatorUploadImageByChunkServer) SendAndClose(m *UploadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imaginatorUploadImageByChunkServer) Recv() (*UploadImageRequest, error) {
	m := new(UploadImageRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Imaginator_DownloadImageByChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadImageRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImaginatorServer).DownloadImageByChunk(m, &imaginatorDownloadImageByChunkServer{stream})
}

type Imaginator_DownloadImageByChunkServer interface {
	Send(*DownloadImageResponse) error
	grpc.ServerStream
}

type imaginatorDownloadImageByChunkServer struct {
	grpc.ServerStream
}

func (x *imaginatorDownloadImageByChunkServer) Send(m *DownloadImageResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Imaginator_ServiceDesc is the grpc.ServiceDesc for Imaginator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Imaginator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imaginator.v1.Imaginator",
	HandlerType: (*ImaginatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadImage",
			Handler:    _Imaginator_UploadImage_Handler,
		},
		{
			MethodName: "DownloadImage",
			Handler:    _Imaginator_DownloadImage_Handler,
		},
		{
			MethodName: "ListAllFiles",
			Handler:    _Imaginator_ListAllFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadImageByChunk",
			Handler:       _Imaginator_UploadImageByChunk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadImageByChunk",
			Handler:       _Imaginator_DownloadImageByChunk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/imaginator.proto",
}
