// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/imaginator.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ImaginatorClient is the client API for Imaginator service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ImaginatorClient interface {
	UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error)
	DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error)
	ListAllFiles(ctx context.Context, in *ListAllFilesRequest, opts ...grpc.CallOption) (*ListAllFilesResponse, error)
	// stream
	UploadFileByChunk(ctx context.Context, opts ...grpc.CallOption) (Imaginator_UploadFileByChunkClient, error)
	DownloadFileByChunk(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (Imaginator_DownloadFileByChunkClient, error)
}

type imaginatorClient struct {
	cc grpc.ClientConnInterface
}

func NewImaginatorClient(cc grpc.ClientConnInterface) ImaginatorClient {
	return &imaginatorClient{cc}
}

func (c *imaginatorClient) UploadFile(ctx context.Context, in *UploadFileRequest, opts ...grpc.CallOption) (*UploadFileResponse, error) {
	out := new(UploadFileResponse)
	err := c.cc.Invoke(ctx, "/imaginator.v1.Imaginator/UploadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginatorClient) DownloadFile(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (*DownloadFileResponse, error) {
	out := new(DownloadFileResponse)
	err := c.cc.Invoke(ctx, "/imaginator.v1.Imaginator/DownloadFile", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginatorClient) ListAllFiles(ctx context.Context, in *ListAllFilesRequest, opts ...grpc.CallOption) (*ListAllFilesResponse, error) {
	out := new(ListAllFilesResponse)
	err := c.cc.Invoke(ctx, "/imaginator.v1.Imaginator/ListAllFiles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *imaginatorClient) UploadFileByChunk(ctx context.Context, opts ...grpc.CallOption) (Imaginator_UploadFileByChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Imaginator_ServiceDesc.Streams[0], "/imaginator.v1.Imaginator/UploadFileByChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &imaginatorUploadFileByChunkClient{stream}
	return x, nil
}

type Imaginator_UploadFileByChunkClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type imaginatorUploadFileByChunkClient struct {
	grpc.ClientStream
}

func (x *imaginatorUploadFileByChunkClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *imaginatorUploadFileByChunkClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *imaginatorClient) DownloadFileByChunk(ctx context.Context, in *DownloadFileRequest, opts ...grpc.CallOption) (Imaginator_DownloadFileByChunkClient, error) {
	stream, err := c.cc.NewStream(ctx, &Imaginator_ServiceDesc.Streams[1], "/imaginator.v1.Imaginator/DownloadFileByChunk", opts...)
	if err != nil {
		return nil, err
	}
	x := &imaginatorDownloadFileByChunkClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Imaginator_DownloadFileByChunkClient interface {
	Recv() (*DownloadFileResponse, error)
	grpc.ClientStream
}

type imaginatorDownloadFileByChunkClient struct {
	grpc.ClientStream
}

func (x *imaginatorDownloadFileByChunkClient) Recv() (*DownloadFileResponse, error) {
	m := new(DownloadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ImaginatorServer is the server API for Imaginator service.
// All implementations must embed UnimplementedImaginatorServer
// for forward compatibility
type ImaginatorServer interface {
	UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error)
	DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error)
	ListAllFiles(context.Context, *ListAllFilesRequest) (*ListAllFilesResponse, error)
	// stream
	UploadFileByChunk(Imaginator_UploadFileByChunkServer) error
	DownloadFileByChunk(*DownloadFileRequest, Imaginator_DownloadFileByChunkServer) error
	mustEmbedUnimplementedImaginatorServer()
}

// UnimplementedImaginatorServer must be embedded to have forward compatible implementations.
type UnimplementedImaginatorServer struct {
}

func (UnimplementedImaginatorServer) UploadFile(context.Context, *UploadFileRequest) (*UploadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}
func (UnimplementedImaginatorServer) DownloadFile(context.Context, *DownloadFileRequest) (*DownloadFileResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DownloadFile not implemented")
}
func (UnimplementedImaginatorServer) ListAllFiles(context.Context, *ListAllFilesRequest) (*ListAllFilesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListAllFiles not implemented")
}
func (UnimplementedImaginatorServer) UploadFileByChunk(Imaginator_UploadFileByChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFileByChunk not implemented")
}
func (UnimplementedImaginatorServer) DownloadFileByChunk(*DownloadFileRequest, Imaginator_DownloadFileByChunkServer) error {
	return status.Errorf(codes.Unimplemented, "method DownloadFileByChunk not implemented")
}
func (UnimplementedImaginatorServer) mustEmbedUnimplementedImaginatorServer() {}

// UnsafeImaginatorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ImaginatorServer will
// result in compilation errors.
type UnsafeImaginatorServer interface {
	mustEmbedUnimplementedImaginatorServer()
}

func RegisterImaginatorServer(s grpc.ServiceRegistrar, srv ImaginatorServer) {
	s.RegisterService(&Imaginator_ServiceDesc, srv)
}

func _Imaginator_UploadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UploadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginatorServer).UploadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imaginator.v1.Imaginator/UploadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginatorServer).UploadFile(ctx, req.(*UploadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imaginator_DownloadFile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DownloadFileRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginatorServer).DownloadFile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imaginator.v1.Imaginator/DownloadFile",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginatorServer).DownloadFile(ctx, req.(*DownloadFileRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imaginator_ListAllFiles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListAllFilesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ImaginatorServer).ListAllFiles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/imaginator.v1.Imaginator/ListAllFiles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ImaginatorServer).ListAllFiles(ctx, req.(*ListAllFilesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Imaginator_UploadFileByChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ImaginatorServer).UploadFileByChunk(&imaginatorUploadFileByChunkServer{stream})
}

type Imaginator_UploadFileByChunkServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type imaginatorUploadFileByChunkServer struct {
	grpc.ServerStream
}

func (x *imaginatorUploadFileByChunkServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *imaginatorUploadFileByChunkServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Imaginator_DownloadFileByChunk_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(DownloadFileRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ImaginatorServer).DownloadFileByChunk(m, &imaginatorDownloadFileByChunkServer{stream})
}

type Imaginator_DownloadFileByChunkServer interface {
	Send(*DownloadFileResponse) error
	grpc.ServerStream
}

type imaginatorDownloadFileByChunkServer struct {
	grpc.ServerStream
}

func (x *imaginatorDownloadFileByChunkServer) Send(m *DownloadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Imaginator_ServiceDesc is the grpc.ServiceDesc for Imaginator service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Imaginator_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "imaginator.v1.Imaginator",
	HandlerType: (*ImaginatorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UploadFile",
			Handler:    _Imaginator_UploadFile_Handler,
		},
		{
			MethodName: "DownloadFile",
			Handler:    _Imaginator_DownloadFile_Handler,
		},
		{
			MethodName: "ListAllFiles",
			Handler:    _Imaginator_ListAllFiles_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFileByChunk",
			Handler:       _Imaginator_UploadFileByChunk_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "DownloadFileByChunk",
			Handler:       _Imaginator_DownloadFileByChunk_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/imaginator.proto",
}
